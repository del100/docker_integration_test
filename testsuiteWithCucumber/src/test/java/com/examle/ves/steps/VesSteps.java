
package com.examle.ves.steps;

import static io.restassured.RestAssured.given;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.ObjectMessage;
import javax.jms.Session;

import org.apache.activemq.ActiveMQConnectionFactory;

import com.examle.ves.util.VesBodyGenerator;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.http.ContentType;
import io.restassured.response.Response;

public class VesSteps {

    private static String ACTIVEMQ_URI = "tcp://localhost:61616";
    private String baseUrl;
    private Response response;

    private Connection connection = null;
    private Session session = null;
    private MessageConsumer consumer = null;

    @Before
    public void setup() throws JMSException {
        final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(ACTIVEMQ_URI);
        connectionFactory.setUserName("artemis");
        connectionFactory.setPassword("simetraehcapa");
        connection = connectionFactory.createConnection();
        connection.start();

        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
        final Destination destination = session.createQueue("VES_events");

        consumer = session.createConsumer(destination);
    }

    @After
    public void tearDown() throws JMSException {
        consumer.close();
        session.close();
        connection.close();
    }

    @Given("the URL for the VES simulator {string}")
    public void setBaseUrl(final String url) {
        baseUrl = url;
    }

    @When("a single VES event is generated by the simulator")
    public void triggerVesEvent() {
        response = given()
                .contentType(ContentType.JSON)
                .body(VesBodyGenerator.getEvent())
                .post(baseUrl);
    }

    @Then("the response status code should be {int}")
    public void checkStatusCode(final int statusCode) {
        response.then().statusCode(statusCode);
    }

    @Then("the listener should generate a JMS message")
    public void getJmsMessage() throws JMSException {
        final Message vesMessage = consumer.receive(1000);
        assertNotNull("No message received", vesMessage);
        assertTrue("Received message is not an ObjectMessage", vesMessage instanceof ObjectMessage);
    }
}
